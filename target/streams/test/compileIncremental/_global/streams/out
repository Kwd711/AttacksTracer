[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 3 products, 4 sources, 10 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/test/scala/malwaresimulator/engine/applications/MalwareTest.scala, ${BASE}/src/test/scala/malwaresimulator/MalwareSimulatorSupervisorTest.scala, ${BASE}/src/test/scala/malwaresimulator/gRPCTest.scala, ${BASE}/src/test/scala/malwaresimulator/engine/applications/WebServerTest.scala, ${BASE}/src/test/scala/malwaresimulator/engine/FirewallTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(${BASE}/src/test/scala/malwaresimulator/engine/FirewallTest.scala), removed = Set(), changed = Set(${BASE}/src/test/scala/malwaresimulator/engine/applications/WebServerTest.scala, ${BASE}/src/test/scala/malwaresimulator/gRPCTest.scala, ${BASE}/src/test/scala/malwaresimulator/engine/applications/MalwareTest.scala, ${BASE}/src/test/scala/malwaresimulator/MalwareSimulatorSupervisorTest.scala), unmodified = ...),Set(${BASE}/target/scala-2.13/test-classes/malwaresimulator/engine/applications/MalwareTest.class, ${BASE}/target/scala-2.13/test-classes/malwaresimulator/MalwareSimulatorSupervisorTest.class, ${BASE}/target/scala-2.13/test-classes/malwaresimulator/gRPCTest.class),Set(),API Changes: Set(NamesChange(malwaresimulator.MalwareSimulatorSupervisor$MakeConnection$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]))), NamesChange(malwaresimulator.Network$,ModifiedNames(changes = UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNode$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.nodes.Node$MakeConnection$,ModifiedNames(changes = UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorServerImpl,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.Network,ModifiedNames(changes = UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$,ModifiedNames(changes = UsedName(ActorType,[Default]), UsedName(Operation,[Default]), UsedName(apply,[Default]), UsedName(collectNetworkInfo,[Default]), UsedName(Actors,[Default]))), NamesChange(malwaresimulator.nodes.Node$,ModifiedNames(changes = UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]))), NamesChange(malwaresimulator.NodeAddress,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]))), NamesChange(malwaresimulator.nodes.Node$MakeConnection,ModifiedNames(changes = UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]))), NamesChange(malwaresimulator.Network$AddNode$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.nodes.Node,ModifiedNames(changes = UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]))), NamesChange(malwaresimulator.nodes.Node$Infect,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]))), NamesChange(malwaresimulator.Network$NetworkCommand,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NetworkCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]))), NamesChange(malwaresimulator.Network$AddNode,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$Operation,ModifiedNames(changes = UsedName(Operation,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulatorClient,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.engine.core.Datagram,ModifiedNames(changes = UsedName(Datagram,[Default]))), NamesChange(malwaresimulator.nodes.Node$Infect$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]))), NamesChange(malwaresimulator.nodes.Node$NodeCommand,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]))), NamesChange(malwaresimulator.NodeAddress$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulator,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNode,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$MakeConnection,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNetwork,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNetwork$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorServer$,ModifiedNames(changes = UsedName(finalize,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulatorClient$,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default])))))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$MakeConnection$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$MakeConnection$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$MakeConnection$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(apply,[Default]), UsedName(MakeConnection,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.Network$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.Network$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.Network$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NetworkCommand,[Default]), UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$AddNode$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$AddNode$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$AddNode$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$MakeConnection$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$MakeConnection$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$MakeConnection$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(MakeConnection,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorServerImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(addNode,[Default]), UsedName(addNetwork,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorServerImpl: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorServerImpl.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(addNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.Network has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.Network: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.Network.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NetworkCommand,[Default]), UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ActorType,[Default]), UsedName(Operation,[Default]), UsedName(apply,[Default]), UsedName(collectNetworkInfo,[Default]), UsedName(Actors,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(Operation,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(Operation,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NodeCommand,[Default]), UsedName(apply,[Default]), UsedName(Node,[Default]), UsedName(MakeConnection,[Default]), UsedName(Infect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.NodeAddress has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.NodeAddress: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.NodeAddress.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$MakeConnection has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$MakeConnection: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$MakeConnection.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(MakeConnection,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.Network$AddNode$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.Network$AddNode$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.Network$AddNode$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(node,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NodeCommand,[Default]), UsedName(apply,[Default]), UsedName(Node,[Default]), UsedName(MakeConnection,[Default]), UsedName(Infect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$Infect has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$Infect: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$Infect.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(Infect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.Network$NetworkCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NetworkCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.Network$NetworkCommand: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.Network$NetworkCommand.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NetworkCommand,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.Network$AddNode has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.Network$AddNode: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.Network$AddNode.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(node,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$Operation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Operation,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$Operation: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$Operation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(Operation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(Operation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.proto.MalwareSimulatorClient has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(addNode,[Default]), UsedName(addNetwork,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.proto.MalwareSimulatorClient: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.proto.MalwareSimulatorClient.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(addNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.engine.core.Datagram has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Datagram,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.engine.core.Datagram: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.engine.core.Datagram.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(Datagram,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$Infect$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$Infect$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$Infect$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(apply,[Default]), UsedName(Infect,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.nodes.Node$NodeCommand has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.nodes.Node$NodeCommand: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.nodes.Node$NodeCommand.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NodeCommand,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.NodeAddress$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.NodeAddress$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.NodeAddress$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.engine.applications.MalwareTest: Set(UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(node,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.proto.MalwareSimulator has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(addNode,[Default]), UsedName(addNetwork,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.proto.MalwareSimulator: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.proto.MalwareSimulator.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(addNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$AddNode has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$AddNode: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$AddNode.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(apply,[Default]), UsedName(AddNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$MakeConnection has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$MakeConnection: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$MakeConnection.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(apply,[Default]), UsedName(MakeConnection,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$AddNetwork has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$AddNetwork: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$AddNetwork.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(AddNetwork,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorSupervisor$AddNetwork$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorSupervisor$AddNetwork$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorSupervisor$AddNetwork$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.MalwareSimulatorSupervisorTest: Set(UsedName(AddNetwork,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.MalwareSimulatorServer$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.MalwareSimulatorServer$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.MalwareSimulatorServer$.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of malwaresimulator.gRPCTest. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe malwaresimulator.proto.MalwareSimulatorClient$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(addNode,[Default]), UsedName(addNetwork,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) malwaresimulator.proto.MalwareSimulatorClient$: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNow invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) malwaresimulator.proto.MalwareSimulatorClient$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of malwaresimulator.gRPCTest: Set(UsedName(addNode,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(${BASE}/src/test/scala/malwaresimulator/engine/FirewallTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(${BASE}/src/test/scala/malwaresimulator/engine/applications/WebServerTest.scala, ${BASE}/src/test/scala/malwaresimulator/gRPCTest.scala, ${BASE}/src/test/scala/malwaresimulator/engine/applications/MalwareTest.scala, ${BASE}/src/test/scala/malwaresimulator/MalwareSimulatorSupervisorTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(${BASE}/target/scala-2.13/test-classes/malwaresimulator/engine/applications/MalwareTest.class, ${BASE}/target/scala-2.13/test-classes/malwaresimulator/MalwareSimulatorSupervisorTest.class, ${BASE}/target/scala-2.13/test-classes/malwaresimulator/gRPCTest.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(malwaresimulator.MalwareSimulatorSupervisor$MakeConnection$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]))), NamesChange(malwaresimulator.Network$,ModifiedNames(changes = UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNode$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.nodes.Node$MakeConnection$,ModifiedNames(changes = UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorServerImpl,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.Network,ModifiedNames(changes = UsedName(RemoveNode,[Default]), UsedName(NetworkCommand,[Default]), UsedName(ShowNode,[Default]), UsedName(Nodes,[Default]), UsedName(apply,[Default]), UsedName(ShowNetwork,[Default]), UsedName(receive,[Default]), UsedName(GetAddress,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$,ModifiedNames(changes = UsedName(ActorType,[Default]), UsedName(Operation,[Default]), UsedName(apply,[Default]), UsedName(collectNetworkInfo,[Default]), UsedName(Actors,[Default]))), NamesChange(malwaresimulator.nodes.Node$,ModifiedNames(changes = UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]))), NamesChange(malwaresimulator.NodeAddress,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]))), NamesChange(malwaresimulator.nodes.Node$MakeConnection,ModifiedNames(changes = UsedName(malwaresimulator;nodes;Node;MakeConnection;init;,[Default]), UsedName(copy,[Default]), UsedName(netmask,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(net,[Default]))), NamesChange(malwaresimulator.Network$AddNode$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.nodes.Node,ModifiedNames(changes = UsedName(GetRoutingTable,[Default]), UsedName(sendAllMalwares,[Default]), UsedName(SendRequest,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(ApplicationCommand,[Default]), UsedName(Applications,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ShowConnections,[Default]), UsedName(setInfectable,[Default]), UsedName(ApplicationRef,[Default]), UsedName(connections,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(ResultSendRequest,[Default]), UsedName(==,[Default]), UsedName(id,[Default]), UsedName(responses,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getRoutingTable,[Default]), UsedName(getAddress,[Default]), UsedName(notifyAll,[Default]), UsedName(getApplications,[Default]), UsedName(receiveDatagram,[Default]), UsedName(ConnectionsList,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(getInfectable,[Default]), UsedName(makeConnection,[Default]), UsedName(AddRoute,[Default]), UsedName(isInstanceOf,[Default]), UsedName(setAddress,[Default]), UsedName(RecvFrom,[Default]), UsedName(getClass,[Default]), UsedName(sockets,[Default]), UsedName(SetWebServer,[Default]), UsedName(setApplication,[Default]), UsedName(infected,[Default]), UsedName(toString,[Default]), UsedName(RoutingNodeCommand,[Default]), UsedName(getAddressBindedNetwork,[Default]), UsedName(address,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(infection,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(RoutingTable,[Default]), UsedName(clone,[Default]), UsedName(malwaresimulator;nodes;Node;init;,[Default]), UsedName(Node,[Default]), UsedName(addRoute,[Default]), UsedName($asInstanceOf,[Default]), UsedName(SetNode,[Default]), UsedName(SendTo,[Default]), UsedName(ExecutableNodeCommand,[Default]), UsedName(getMalwares,[Default]), UsedName(receive,[Default]), UsedName(MakeConnection,[Default]), UsedName(GetApplications,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(networkResponse,[Default]), UsedName(finalize,[Default]), UsedName(GetAddress,[Default]), UsedName(SetAddress,[Default]), UsedName(SocketOpen,[Default]), UsedName(SetWebBrowser,[Default]), UsedName(Sockets,[Default]), UsedName(Infect,[Default]), UsedName(deliverDatagram,[Default]), UsedName(ReturnAddress,[Default]), UsedName(OpenedSocket,[Default]), UsedName(Bind,[Default]), UsedName(displayAllConnections,[Default]))), NamesChange(malwaresimulator.nodes.Node$Infect,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]))), NamesChange(malwaresimulator.Network$NetworkCommand,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NetworkCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]))), NamesChange(malwaresimulator.Network$AddNode,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(malwaresimulator;Network;AddNode;init;,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(address,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(node,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$Operation,ModifiedNames(changes = UsedName(Operation,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulatorClient,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.engine.core.Datagram,ModifiedNames(changes = UsedName(Datagram,[Default]))), NamesChange(malwaresimulator.nodes.Node$Infect$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(productElementNames,[Default]), UsedName(notifyAll,[Default]), UsedName(productElement,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(ccServer,[Default]), UsedName(toString,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(name,[Default]), UsedName(apply,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName(unapply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(malwaresimulator;nodes;Node;Infect;init;,[Default]), UsedName(curried,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(productPrefix,[Default]), UsedName(productElementName,[Default]), UsedName(Infect,[Default]))), NamesChange(malwaresimulator.nodes.Node$NodeCommand,ModifiedNames(changes = UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NodeCommand,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(notify,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(hashCode,[Default]), UsedName(!=,[Default]), UsedName(clone,[Default]), UsedName($asInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]))), NamesChange(malwaresimulator.NodeAddress$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;NodeAddress;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(NodeAddress,[Default]), UsedName(apply,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(node,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulator,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNode,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNode;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(AddNode,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$MakeConnection,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;MakeConnection;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(MakeConnection,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$5,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNetwork,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorSupervisor$AddNetwork$,ModifiedNames(changes = UsedName(copy,[Default]), UsedName(tupled,[Default]), UsedName(copy$default$1,[Default]), UsedName(AddNetwork,[Default]), UsedName(malwaresimulator;MalwareSimulatorSupervisor;AddNetwork;init;,[Default]), UsedName(apply,[Default]), UsedName(replyTo,[Default]), UsedName(copy$default$3,[Default]), UsedName(unapply,[Default]), UsedName(curried,[Default]), UsedName(copy$default$4,[Default]))), NamesChange(malwaresimulator.MalwareSimulatorServer$,ModifiedNames(changes = UsedName(finalize,[Default]))), NamesChange(malwaresimulator.proto.MalwareSimulatorClient$,ModifiedNames(changes = UsedName(addNode,[Default]), UsedName(addNetwork,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(malwaresimulator.gRPCTest, malwaresimulator.engine.applications.MalwareTest, malwaresimulator.MalwareSimulatorSupervisorTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(${BASE}/src/test/scala/malwaresimulator/engine/applications/MalwareTest.scala, ${BASE}/src/test/scala/malwaresimulator/MalwareSimulatorSupervisorTest.scala, ${BASE}/src/test/scala/malwaresimulator/gRPCTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(malwaresimulator.MalwareSimulatorSupervisorTest, malwaresimulator.engine.applications.MalwareTest, malwaresimulator.gRPCTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mall 5 sources are invalidated[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: malwaresimulator.gRPCTest, malwaresimulator.engine.applications.MalwareTest, malwaresimulator.MalwareSimulatorSupervisorTest[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 5 Scala sources to /Users/oh_yuya/Documents/Projects/malwaresimulator-kai/target/scala-2.13/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.4.4:compile for Scala 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 3e2f6c29 for Scala compiler version 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-target:11[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-unchecked[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xlog-reflective-calls[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xlint[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.1/scala-library-2.13.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/oh_yuya/Documents/Projects/malwaresimulator-kai/target/scala-2.13/test-classes:/Users/oh_yuya/Documents/Projects/malwaresimulator-kai/target/scala-2.13/classes:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/scalapb-runtime_2.13/0.11.3/scalapb-runtime_2.13-0.11.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/grpc/akka-grpc-runtime_2.13/2.0.0/akka-grpc-runtime_2.13-2.0.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/grpc/grpc-stub/1.38.0/grpc-stub-1.38.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-stream_2.13/2.6.13/akka-stream_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-cluster-typed_2.13/2.6.13/akka-cluster-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-cluster-sharding-typed_2.13/2.6.13/akka-cluster-sharding-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor-testkit-typed_2.13/2.6.13/akka-actor-testkit-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-stream-testkit_2.13/2.6.13/akka-stream-testkit_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/management/akka-management_2.13/1.0.9/akka-management_2.13-1.0.9.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http_2.13/10.2.3/akka-http_2.13-10.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http-spray-json_2.13/10.2.3/akka-http-spray-json_2.13-10.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/management/akka-management-cluster-http_2.13/1.0.9/akka-management-cluster-http_2.13-1.0.9.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/management/akka-management-cluster-bootstrap_2.13/1.0.9/akka-management-cluster-bootstrap_2.13-1.0.9.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/discovery/akka-discovery-kubernetes-api_2.13/1.0.9/akka-discovery-kubernetes-api_2.13-1.0.9.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-discovery_2.13/2.6.13/akka-discovery_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-slf4j_2.13/2.6.13/akka-slf4j_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_2.13/3.1.2/scalatest_2.13-3.1.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http2-support_2.13/10.2.3/akka-http2-support_2.13-10.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-persistence-typed_2.13/2.6.13/akka-persistence-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-serialization-jackson_2.13/2.6.13/akka-serialization-jackson_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/akka-persistence-jdbc_2.13/5.0.0/akka-persistence-jdbc_2.13-5.0.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-persistence-testkit_2.13/2.6.13/akka-persistence-testkit_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/postgresql/postgresql/42.2.18/postgresql-42.2.18.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-persistence-query_2.13/2.6.13/akka-persistence-query_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/akka-projection-eventsourced_2.13/1.1.0/akka-projection-eventsourced_2.13-1.1.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/akka-projection-jdbc_2.13/1.1.0/akka-projection-jdbc_2.13-1.1.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalikejdbc/scalikejdbc_2.13/3.5.0/scalikejdbc_2.13-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalikejdbc/scalikejdbc-config_2.13/3.5.0/scalikejdbc-config_2.13-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-stream-kafka_2.13/2.0.6/akka-stream-kafka_2.13-2.0.6.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/akka-projection-testkit_2.13/1.1.0/akka-projection-testkit_2.13-1.1.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/lenses_2.13/0.11.3/lenses_2.13-0.11.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/protobuf/protobuf-java/3.15.8/protobuf-java-3.15.8.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.4.4/scala-collection-compat_2.13-2.4.4.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/grpc/grpc-core/1.38.0/grpc-core-1.38.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/grpc/grpc-netty-shaded/1.38.0/grpc-netty-shaded-1.38.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-http-core_2.13/10.2.3/akka-http-core_2.13-10.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/grpc/grpc-api/1.38.0/grpc-api-1.38.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/guava/guava/30.1-android/guava-30.1-android.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.4.0/error_prone_annotations-2.4.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.19/animal-sniffer-annotations-1.19.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor_2.13/2.6.13/akka-actor_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-protobuf-v3_2.13/2.6.13/akka-protobuf-v3_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/reactivestreams/reactive-streams/1.0.3/reactive-streams-1.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.13/0.4.2/ssl-config-core_2.13-0.4.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor-typed_2.13/2.6.13/akka-actor-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-cluster_2.13/2.6.13/akka-cluster_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-cluster-tools_2.13/2.6.13/akka-cluster-tools_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-distributed-data_2.13/2.6.13/akka-distributed-data_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-cluster-sharding_2.13/2.6.13/akka-cluster-sharding_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-remote_2.13/2.6.13/akka-remote_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-testkit_2.13/2.6.13/akka-testkit_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/spray/spray-json_2.13/1.3.6/spray-json_2.13-1.3.6.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_2.13/3.1.2/scalactic_2.13-3.1.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.13.1/scala-reflect-2.13.1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.13/1.2.0/scala-xml_2.13-1.2.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-stream-typed_2.13/2.6.13/akka-stream-typed_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-persistence_2.13/2.6.13/akka-persistence_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.10.5/jackson-core-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.10.5/jackson-annotations-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.10.5.1/jackson-databind-2.10.5.1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/module/jackson-module-scala_2.13/2.10.5/jackson-module-scala_2.13-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.10.5/jackson-datatype-jdk8-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.10.5/jackson-datatype-jsr310-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.10.5/jackson-module-parameter-names-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-cbor/2.10.5/jackson-dataformat-cbor-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/lz4/lz4-java/1.7.1/lz4-java-1.7.1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/slick/slick_2.13/3.3.3/slick_2.13-3.3.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/slick/slick-hikaricp_2.13/3.3.3/slick-hikaricp_2.13-3.3.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lightbend/akka/akka-projection-core_2.13/1.1.0/akka-projection-core_2.13-1.1.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalikejdbc/scalikejdbc-core_2.13/3.5.0/scalikejdbc-core_2.13-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalikejdbc/scalikejdbc-interpolation_2.13/3.5.0/scalikejdbc-interpolation_2.13-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.4.0/config-1.4.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/kafka/kafka-clients/2.4.1/kafka-clients-2.4.1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/android/annotations/4.1.1.4/annotations-4.1.1.4.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/perfmark/perfmark-api/0.23.0/perfmark-api-0.23.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-parsing_2.13/10.2.3/akka-parsing_2.13-10.2.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/twitter/hpack/1.0.2/hpack-1.0.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/grpc/grpc-context/1.38.0/grpc-context-1.38.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/checkerframework/checker-compat-qual/2.5.5/checker-compat-qual-2.5.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-java8-compat_2.13/0.9.0/scala-java8-compat_2.13-0.9.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.13/1.1.2/scala-parser-combinators_2.13-1.1.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-coordination_2.13/2.6.13/akka-coordination_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/lmdbjava/lmdbjava/0.7.0/lmdbjava-0.7.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-pki_2.13/2.6.13/akka-pki_2.13-2.6.13.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/agrona/agrona/1.9.0/agrona-1.9.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/fasterxml/jackson/module/jackson-module-paranamer/2.10.5/jackson-module-paranamer-2.10.5.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/zaxxer/HikariCP/3.2.0/HikariCP-3.2.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-dbcp2/2.7.0/commons-dbcp2-2.7.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalikejdbc/scalikejdbc-interpolation-macro_2.13/3.5.0/scalikejdbc-interpolation-macro_2.13-3.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/luben/zstd-jni/1.4.3-1/zstd-jni-1.4.3-1.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/xerial/snappy/snappy-java/1.1.7.3/snappy-java-1.1.7.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jnr-ffi/2.1.9/jnr-ffi-2.1.9.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jffi/1.2.18/jffi-1.2.18.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jffi/1.2.18/jffi-1.2.18-native.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jnr-constants/0.9.12/jnr-constants-0.9.12.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/hierynomus/asn-one/0.5.0/asn-one-0.5.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thoughtworks/paranamer/paranamer/2.8/paranamer-2.8.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/commons/commons-pool2/2.7.0/commons-pool2-2.7.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm/5.0.3/asm-5.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-commons/5.0.3/asm-commons-5.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-analysis/5.0.3/asm-analysis-5.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-tree/5.0.3/asm-tree-5.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/ow2/asm/asm-util/5.0.3/asm-util-5.0.3.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jnr-a64asm/1.0.0/jnr-a64asm-1.0.0.jar:/Users/oh_yuya/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/github/jnr/jnr-x86asm/1.0.2/jnr-x86asm-1.0.2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 4.784528236 s[0m
[0m[[0m[0mdebug[0m] [0m[0mdone compiling[0m
