
// Generated by Akka gRPC. DO NOT EDIT.
package malwaresimulator.proto

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait MalwareSimulatorClient extends MalwareSimulator with MalwareSimulatorClientPowerApi with AkkaGrpcClient

object MalwareSimulatorClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): MalwareSimulatorClient =
    new DefaultMalwareSimulatorClient(settings)
}

final class DefaultMalwareSimulatorClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends MalwareSimulatorClient {
  import MalwareSimulator.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def showNetRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(showNetDescriptor, channel, options, settings)
      
    }
  
    private def addNodeRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(addNodeDescriptor, channel, options, settings)
      
    }
  
    private def addNetworkRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(addNetworkDescriptor, channel, options, settings)
      
    }
  
    private def makeConnectionRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(makeConnectionDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer showNet(malwaresimulator.proto.ShowNetRequest) if possible.
     */
    
      override def showNet(): SingleResponseRequestBuilder[malwaresimulator.proto.ShowNetRequest, malwaresimulator.proto.WholeNetwork] =
        showNetRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of showNet
     */
    def showNet(in: malwaresimulator.proto.ShowNetRequest): scala.concurrent.Future[malwaresimulator.proto.WholeNetwork] =
      showNet().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addNode(malwaresimulator.proto.AddNodeRequest) if possible.
     */
    
      override def addNode(): SingleResponseRequestBuilder[malwaresimulator.proto.AddNodeRequest, malwaresimulator.proto.Node] =
        addNodeRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of addNode
     */
    def addNode(in: malwaresimulator.proto.AddNodeRequest): scala.concurrent.Future[malwaresimulator.proto.Node] =
      addNode().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addNetwork(malwaresimulator.proto.AddNetworkRequest) if possible.
     */
    
      override def addNetwork(): SingleResponseRequestBuilder[malwaresimulator.proto.AddNetworkRequest, malwaresimulator.proto.Network] =
        addNetworkRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of addNetwork
     */
    def addNetwork(in: malwaresimulator.proto.AddNetworkRequest): scala.concurrent.Future[malwaresimulator.proto.Network] =
      addNetwork().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer makeConnection(malwaresimulator.proto.MakeConnectionRequest) if possible.
     */
    
      override def makeConnection(): SingleResponseRequestBuilder[malwaresimulator.proto.MakeConnectionRequest, malwaresimulator.proto.WholeNetwork] =
        makeConnectionRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of makeConnection
     */
    def makeConnection(in: malwaresimulator.proto.MakeConnectionRequest): scala.concurrent.Future[malwaresimulator.proto.WholeNetwork] =
      makeConnection().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultMalwareSimulatorClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): MalwareSimulatorClient =
    new DefaultMalwareSimulatorClient(settings)
}

trait MalwareSimulatorClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer showNet(malwaresimulator.proto.ShowNetRequest) if possible.
     */
    
      def showNet(): SingleResponseRequestBuilder[malwaresimulator.proto.ShowNetRequest, malwaresimulator.proto.WholeNetwork] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addNode(malwaresimulator.proto.AddNodeRequest) if possible.
     */
    
      def addNode(): SingleResponseRequestBuilder[malwaresimulator.proto.AddNodeRequest, malwaresimulator.proto.Node] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer addNetwork(malwaresimulator.proto.AddNetworkRequest) if possible.
     */
    
      def addNetwork(): SingleResponseRequestBuilder[malwaresimulator.proto.AddNetworkRequest, malwaresimulator.proto.Network] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer makeConnection(malwaresimulator.proto.MakeConnectionRequest) if possible.
     */
    
      def makeConnection(): SingleResponseRequestBuilder[malwaresimulator.proto.MakeConnectionRequest, malwaresimulator.proto.WholeNetwork] = ???
    
  

}
