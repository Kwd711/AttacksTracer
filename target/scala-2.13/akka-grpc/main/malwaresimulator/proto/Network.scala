// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package malwaresimulator.proto

@SerialVersionUID(0L)
final case class Network(
    id: _root_.scala.Int = 0,
    networkName: _root_.scala.Predef.String = "",
    address: _root_.scala.Predef.String = "",
    subnetMask: _root_.scala.Int = 0,
    nodes: _root_.scala.Seq[malwaresimulator.proto.Node] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Network] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = networkName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = address
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = subnetMask
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      nodes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = networkName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = address
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = subnetMask
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      nodes.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Int): Network = copy(id = __v)
    def withNetworkName(__v: _root_.scala.Predef.String): Network = copy(networkName = __v)
    def withAddress(__v: _root_.scala.Predef.String): Network = copy(address = __v)
    def withSubnetMask(__v: _root_.scala.Int): Network = copy(subnetMask = __v)
    def clearNodes = copy(nodes = _root_.scala.Seq.empty)
    def addNodes(__vs: malwaresimulator.proto.Node*): Network = addAllNodes(__vs)
    def addAllNodes(__vs: Iterable[malwaresimulator.proto.Node]): Network = copy(nodes = nodes ++ __vs)
    def withNodes(__v: _root_.scala.Seq[malwaresimulator.proto.Node]): Network = copy(nodes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = networkName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = address
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = subnetMask
          if (__t != 0) __t else null
        }
        case 5 => nodes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => _root_.scalapb.descriptors.PString(networkName)
        case 3 => _root_.scalapb.descriptors.PString(address)
        case 4 => _root_.scalapb.descriptors.PInt(subnetMask)
        case 5 => _root_.scalapb.descriptors.PRepeated(nodes.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = malwaresimulator.proto.Network
    // @@protoc_insertion_point(GeneratedMessage[malwaresimulator.Network])
}

object Network extends scalapb.GeneratedMessageCompanion[malwaresimulator.proto.Network] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[malwaresimulator.proto.Network] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): malwaresimulator.proto.Network = {
    var __id: _root_.scala.Int = 0
    var __networkName: _root_.scala.Predef.String = ""
    var __address: _root_.scala.Predef.String = ""
    var __subnetMask: _root_.scala.Int = 0
    val __nodes: _root_.scala.collection.immutable.VectorBuilder[malwaresimulator.proto.Node] = new _root_.scala.collection.immutable.VectorBuilder[malwaresimulator.proto.Node]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readInt32()
        case 18 =>
          __networkName = _input__.readStringRequireUtf8()
        case 26 =>
          __address = _input__.readStringRequireUtf8()
        case 32 =>
          __subnetMask = _input__.readInt32()
        case 42 =>
          __nodes += _root_.scalapb.LiteParser.readMessage[malwaresimulator.proto.Node](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    malwaresimulator.proto.Network(
        id = __id,
        networkName = __networkName,
        address = __address,
        subnetMask = __subnetMask,
        nodes = __nodes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[malwaresimulator.proto.Network] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      malwaresimulator.proto.Network(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        networkName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        subnetMask = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        nodes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[malwaresimulator.proto.Node]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MalwareSimulatorProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MalwareSimulatorProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = malwaresimulator.proto.Node
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = malwaresimulator.proto.Network(
    id = 0,
    networkName = "",
    address = "",
    subnetMask = 0,
    nodes = _root_.scala.Seq.empty
  )
  implicit class NetworkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, malwaresimulator.proto.Network]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, malwaresimulator.proto.Network](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def networkName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.networkName)((c_, f_) => c_.copy(networkName = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def subnetMask: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.subnetMask)((c_, f_) => c_.copy(subnetMask = f_))
    def nodes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[malwaresimulator.proto.Node]] = field(_.nodes)((c_, f_) => c_.copy(nodes = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val NETWORKNAME_FIELD_NUMBER = 2
  final val ADDRESS_FIELD_NUMBER = 3
  final val SUBNETMASK_FIELD_NUMBER = 4
  final val NODES_FIELD_NUMBER = 5
  def of(
    id: _root_.scala.Int,
    networkName: _root_.scala.Predef.String,
    address: _root_.scala.Predef.String,
    subnetMask: _root_.scala.Int,
    nodes: _root_.scala.Seq[malwaresimulator.proto.Node]
  ): _root_.malwaresimulator.proto.Network = _root_.malwaresimulator.proto.Network(
    id,
    networkName,
    address,
    subnetMask,
    nodes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[malwaresimulator.Network])
}
