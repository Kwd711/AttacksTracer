package malwaresimulator.engine.core

import malwaresimulator.Network.NetworkCommand
import malwaresimulator.nodes.Node.NodeCommand


trait Command
case class Datagram(srcAddress: InetAddress,    // 送信元アドレス
                    srcPort: Int,               // 送信元ポート番号
                    dstAddress: InetAddress,   // 送信先アドレス
                    dstPort: Int,              // 送信先ポート番号
                    payload: Protocol,          // 転送するデータの中身（ペイロード）
                    forward: InetAddress = null,     // 転送先
                    option: Any = null) extends Command with NodeCommand with NetworkCommand

abstract class Protocol(val defaultProtocolPort: Int) {
  def datagram(srcAddress: InetAddress,  srcPort: Int,
               destAddress: InetAddress, destPort: Int = defaultProtocolPort,
               gw: InetAddress = null, option: Any = null): Datagram = {
    Datagram(srcAddress, srcPort, destAddress, destPort, this, gw, option)
  }
}

case class Http(headersMap: Map[String, String], body: Any) extends Protocol(80)

case class Https(headersMap: Map[String, String], body: Any) extends Protocol(443)

//case class Smtp(val mail: Mail, val destAddress: InetAddress) extends Protocol(25)

//case class Pop(val user: String, val mails: List[Mail]) extends Protocol(110)

//case class Smb(val header: String, val body: List[File]) extends Protocol(445)

case class SmbAuth(header: String, id: String, password: String) extends Protocol(445)
