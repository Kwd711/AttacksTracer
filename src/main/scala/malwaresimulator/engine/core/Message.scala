package malwaresimulator.engine.core

import akka.actor.typed.ActorRef
import malwaresimulator.engine.nodes.{FirewallRule, Socket}
import malwaresimulator.{Connection, Network, NodeAddress, proto}
import malwaresimulator.MalwareSimulatorSupervisor.Operation

import scala.collection.mutable.ListBuffer

object Message {
  trait Command

  trait NetworkCommand extends Command
  final case class AddNode(node: ActorRef[NodeCommand], address: InetAddress) extends NetworkCommand
  final case class RemoveNode(node: ActorRef[NodeCommand], address: InetAddress) extends NetworkCommand
  final case class ShowNode(replyTo: ActorRef[ApplicationCommand]) extends NetworkCommand
  final case class Nodes(list: ListBuffer[NodeAddress]) extends ApplicationCommand
  final case class GetAddress(replyTo: ActorRef[Operation]) extends NetworkCommand
  final case class ShowNetwork(replyTo: ActorRef[proto.Network]) extends NetworkCommand

  trait NodeCommand extends Command
  final case class SocketOpen(actor: ActorRef[ApplicationCommand]) extends NodeCommand
  final case class OpenedSocket(socket: Socket) extends ApplicationCommand
  final case class Bind(s: Socket, address: InetAddress, port: Int) extends NodeCommand
  final case class SendTo(s: Socket, data: Protocol, dstAddress: InetAddress, dstPort: Int) extends NodeCommand
  final case class RecvFrom(s: Socket, data: Protocol, option: Any, srcAddress: InetAddress, srcPort: Int) extends ApplicationCommand
  final case class MakeConnection(address: InetAddress, netmask: Int, net: ActorRef[NetworkCommand]) extends NodeCommand
  final case class ShowConnections(replyTo: ActorRef[ApplicationCommand]) extends NodeCommand
  final case class ConnectionsList(conList: ListBuffer[Connection]) extends ApplicationCommand
  final case class AddRule(newRule: FirewallRule) extends NodeCommand

  trait ExecutableNodeCommand extends NodeCommand
  final case class SetWebServer(id: Int, name: String, actorRef: ActorRef[ApplicationCommand]) extends ExecutableNodeCommand
  final case class SetWebBrowser(id: Int, name: String, actorRef: ActorRef[ApplicationCommand]) extends ExecutableNodeCommand
  final case class ApplicationRef(ref: ActorRef[ApplicationCommand]) extends NodeCommand
  final case class GetApplications(replyTo: ActorRef[AnyRef]) extends ExecutableNodeCommand
  final case class Applications(applications: ListBuffer[ActorRef[ApplicationCommand]])
  final case class Infect(name: String, malware: ActorRef[ApplicationCommand], ccServer: InetAddress) extends NodeCommand

  trait RoutingNodeCommand extends NodeCommand
  final case class GetRoutingTable(replyTo: ActorRef[Command]) extends RoutingNodeCommand
  final case class RoutingTable(rtable: RoutingTable) extends RoutingNodeCommand
  final case class AddRoute(dst: InetAddress, gw: InetAddress, net: Network) extends RoutingNodeCommand

  trait ApplicationCommand extends NodeCommand
  final case class SetNode(nodeRef: ActorRef[NodeCommand]) extends ApplicationCommand
  final case class SendRequest(dstAddress: InetAddress) extends ApplicationCommand
  final case class ResultSendRequest(result: String) extends malwaresimulator.MalwareSimulatorSupervisor.Operation

}
