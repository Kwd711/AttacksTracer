package malwaresimulator.engine.nodes

import akka.actor.typed.scaladsl.Behaviors
import akka.actor.typed.{ActorRef, Behavior}
import malwaresimulator.engine.TraceLogger
import malwaresimulator.engine.applications.Malware
import malwaresimulator.engine.core.{Datagram, InetAddress, Message}

object Node {

  def apply(id: Int, name: String, address: InetAddress): Behavior[Message.NodeCommand] = {
    println(s"[INFO] Node($name) is started")
    new Node(id, name, address).receive()
  }
}

class Node(val id: Int, val name: String, var address: InetAddress) extends ExecutableNode with RoutingNode with Firewall {

  def receive(): Behavior[Message.NodeCommand] = {
    import Message._
    Behaviors.receive{ (context, message) =>
      message match {
        case d: Datagram =>
          networkResponse(d)
          Behaviors.same
        case MakeConnection(address, netmask, net) =>
          makeConnection(address, netmask, net)
          Behaviors.same
        case ShowConnections(replyTo) =>
          replyTo ! ConnectionsList(connections)
          Behaviors.same
        case SetWebServer(id, name, actorRef) =>
          setApplication(id, name)
          Behaviors.same
        case SetWebBrowser(id, name, actorRef) =>
          setApplication(id, name)
          Behaviors.same
        case GetApplications(replyTo) =>
          println(s"[INFO] Node($name) received a GetApplicaitons message.")
          replyTo ! malwaresimulator.proto.Node(id, name, address.toString, getApplications())
          Behaviors.same
        case SocketOpen(replyTo) =>
          val socket = sockets.open(replyTo)
          replyTo ! OpenedSocket(socket)
          Behaviors.same
        case Bind(s, address, port) =>
          TraceLogger.info(name, s"received a Bind($s, $address, $port)")
          sockets.bind(s, address, port)
          Behaviors.same
        case SendTo(s, data, dstAddress, dstPort) =>
          sockets.sendto(s, data, dstAddress, dstPort)
          Behaviors.same
        case AddRule(rule) =>
          addRule(rule)
          Behaviors.same
        case AddRoute(dst, gw, net) =>
          addRoute(dst, gw, net)
          Behaviors.same
        case Infect(malwareName, malware, ccServer) =>
          infection(malwareName, malware)
          val socket = sockets.open(malware)
          malware ! OpenedSocket(socket)
          Behaviors.same
      }
    }
  }
}
