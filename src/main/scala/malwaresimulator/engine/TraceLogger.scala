package malwaresimulator.engine

import scala.annotation.tailrec
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.HashMap
import scala.util.Random
import core.Datagram

sealed trait EventType
object EventType {
  case object Action extends EventType
  case object Info extends EventType
  case object Error extends EventType
}

trait Event {
  val eventType: EventType
}

/**
 * アクターで起こった通信
 *
 * @param eventType
 * @param actorName
 * @param message
 * @param datagram
 */
case class DatagramEvent(val eventType: EventType, val actorName: String,
                         val message: String, val datagram: Datagram) extends Event {
  // TODO 変数の有無で出力を変える
  override def toString: String = s"$eventType:[$actorName, $message] => $datagram"
}

/**
 * アクターで呼ばれた処理
 *
 * @param eventType
 * @param message
 */
case class ActionEvent(val eventType: EventType, val actorName: String, val message: String) extends Event {
  override def toString: String = s"$eventType:[$actorName]=$message"
}

/**
 * シミュレートで発生した事象をまとめたログ
 */
case class EventLog(val events: List[Event]) // TODO 出力用のメソッドを用意する(summary, datagramメソッドなど), シミュレートの実行時間も持たせる？

/**
 * アクターでのアクションを事象ごとで収集するLoggerオブジェクト
 */
object TraceLogger {
  private[this] var lastId: Long = 0

  private[this] var resultMap: HashMap[Long, ListBuffer[Event]] = HashMap.empty

  private[this] val random = new Random

  @tailrec
  def start: Long = {
    // 0を含まない自然数
    val id = random.nextLong.abs + 1
    if (resultMap.contains(id)) {
      start
    } else {
      resultMap += (id -> ListBuffer.empty)
      lastId = id
      id
    }
  }

  def stop(id: Long): Option[EventLog] = {
    resultMap.get(id) match {
      case Some(list) => Some(EventLog(list.toList))
      case None       => None
    }
  }

  private[this] def appendDatagramLog(id: Long, eventType: EventType, actorName: String, message: String, d: Datagram): Unit = {
    val event = DatagramEvent(eventType, actorName, message, d)
    appendLog(id, event)
  }

  private[this] def appendActionLog(id: Long, eventType: EventType, actorName: String, message: String): Unit = {
    val event = ActionEvent(eventType, actorName, message)
    appendLog(id, event)
  }

  private[this] def appendLog(id: Long, event: Event): Unit = {
    resultMap.get(id) match {
      case Some(list) => list += event
      // ログを記録しないで出力する. (OperationToolとの互換性のため)
      case None => println(event.toString)
    }
  }

  def info(id: Long, taskName: String): Unit = {
    val event = ActionEvent(EventType.Action, "Action", taskName)
    appendLog(id, event)
  }

  protected[engine] def info(id: Long, actorName: String, message: String): Unit =
    appendActionLog(id, EventType.Info, actorName, message)
  protected[engine] def info(actorName: String, message: String): Unit = info(lastId, actorName, message)

  protected[engine] def error(id: Long, actorName: String, message: String): Unit =
    appendActionLog(id, EventType.Error, actorName, message)

  protected[engine] def error(actorName: String, message: String): Unit = error(lastId, actorName, message)

  // DatagramLog
  protected[engine] def info(id: Long, actorName: String, message: String, d: Datagram): Unit =
    appendDatagramLog(id, EventType.Info, actorName, message, d)

  protected[engine] def info(actorName: String, message: String, d: Datagram): Unit = info(lastId, actorName, message, d)

  protected[engine] def info(actorName: String, d: Datagram): Unit = info(lastId, actorName, null, d)

  protected[engine] def error(id: Long, actorName: String, message: String, d: Datagram): Unit =
    appendDatagramLog(id, EventType.Error, actorName, message, d)

  protected[engine] def error(actorName: String, message: String, d: Datagram): Unit = error(lastId, actorName, message, d)

  protected[engine] def error(actorName: String, d: Datagram): Unit = error(lastId, actorName, null, d)
}

