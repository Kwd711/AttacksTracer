package malwaresimulator.engine.applications

import akka.actor.typed.{ActorRef, Behavior}
import akka.actor.typed.scaladsl.{ActorContext, Behaviors, LoggerOps}
import malwaresimulator.engine.core.{Http, InetAddress, Protocol}
import malwaresimulator.nodes.Node.{ApplicationCommand, Bind, NodeCommand, OpenedSocket, RecvFrom, SendTo, SetNode, SocketOpen}
import malwaresimulator.nodes.Socket

import scala.collection.mutable.ListBuffer


class WebServerApp(node: ActorRef[NodeCommand], listenPort: Int) extends ServerApplication(node, listenPort) {
  val name = "Web Server"
  val page: String = "Test Page."

//  private def writePage(a: Any): String = "Test Page."

  override def response(): Behavior[ApplicationCommand] = {
    Behaviors.receive { (context, message) =>
      message match {
//        case SetNode(nodeRef) =>
//          node = Some(nodeRef)
//          Behaviors.same
        case OpenedSocket(s) =>
          socket = Some(s)
          node ! Bind(s, InetAddress.Default, listenPort)
          Behaviors.same
        case RecvFrom(socket, data, option, srcAddress, srcPort) =>
          data match {
            case http: Http if http.headersMap.contains("request") => {
              println(this, "Received a http request.")
              node ! SendTo(socket, Http(Map("response" -> "OK"), page), srcAddress, srcPort)
              Behaviors.same
            }
          }
      }
    }
  }

}

object WebServerApp {
  def apply(node: ActorRef[NodeCommand], listenPort: Int = 80): Behavior[ApplicationCommand] = {
    println("[INFO] WebServerApp started.")
    val server = new WebServerApp(node, listenPort)
    Behaviors.setup { context =>
      server.node ! SocketOpen(context.self)
      server.response()
    }
  }
}

//class TaintWebServerApp(listenPort: Int) extends WebServerApp(listenPort) {
//  import WebServerApp._
//
//  override val name = "Taint Web Server"
//
//  private var ccServerAddress: InetAddress = null
//
//  def getCCServerAddress(): InetAddress = ccServerAddress
//  def setCCserverAddress(a: InetAddress): Unit = ccServerAddress = a
//
//  override def action(): Behavior[WebServerCommand] = {
//    Behaviors.receiveMessage { message =>
//      message match {
//        case d: Datagram => {
//          if (ccServerAddress == null) {
//            d.protocol match {
//              case http: Http if http.headersMap.contains("request") => {
//                println(this, "Received a http request.")
//                node ! Http(Map("response" -> "OK"), page).datagram(d.dstAddr, d.dstPort, d.srcAddr, d.srcPort)
//                Behaviors.same
//              }
//            }
//          } else {
//            d.protocol match {
//              case http: Http => {
//                println(this, "Received a http request.")
//                node ! Http(Map("response" -> "OK", "redirect" -> getCCServerAddress.toString), null)
//                  .datagram(d.dstAddr, d.dstPort, d.srcAddr, d.srcPort)
//                Behaviors.same
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//}
//
//object TaintWebServerApp {
//  def apply(listenPort: Int = 80): Behavior[WebServerCommand] = (new TaintWebServerApp(listenPort)).action()
//}