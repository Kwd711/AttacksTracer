package malwaresimulator

import akka.actor.typed.{ActorRef, ActorSystem}
import akka.actor.typed.scaladsl.AskPattern._
import akka.util.Timeout
import malwaresimulator.engine.core.InetAddress

import scala.concurrent.duration._
import malwaresimulator.proto.{AddNetworkRequest, AddNodeRequest, MakeConnectionRequest, WholeNetwork}

import scala.concurrent.Future
import scala.util.{Failure, Success}

class MalwareSimulatorServerImpl(val theSystem: ActorSystem[MalwareSimulatorSupervisor.Operation]) extends proto.MalwareSimulator {
  implicit val timeout: Timeout = 3.seconds
  implicit val system: ActorSystem[MalwareSimulatorSupervisor.Operation] = theSystem
  implicit val ec = system.executionContext

  override def showNet(in: proto.ShowNetRequest): Future[proto.WholeNetwork] =
    theSystem.ask(ref => MalwareSimulatorSupervisor.ShowNet(ref))


  override def addNode(in: AddNodeRequest): Future[proto.Node] =
    theSystem.ask(ref => MalwareSimulatorSupervisor.AddNode(ref, in.name, in.address))


  override def addNetwork(in: AddNetworkRequest): Future[proto.Network] =
    theSystem.ask(ref => MalwareSimulatorSupervisor.AddNetwork(ref, in.name, in.address, in.subnetMask))

  override def makeConnection(in: MakeConnectionRequest): Future[proto.WholeNetwork] =
    theSystem.ask(ref => MalwareSimulatorSupervisor.MakeConnection(ref, in.nodeId, in.networkId, in.address, in.subnetMask))
}
