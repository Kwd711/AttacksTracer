package malwaresimulator

import akka.actor.typed.Behavior
import akka.actor.typed.scaladsl.Behaviors
import malwaresimulator.nodes.Node.NodeCommand

import scala.concurrent.Future
import scala.io.StdIn
import scala.util.Success

object NodeManager {
  trait NodeManagerCommand extends NodeCommand
  case class ReadConsoleInput() extends NodeManagerCommand

}

//class NodeManager {
//  import NodeManager._
//
//  def action(): Behavior[NodeManagerCommand] = {
//    Behaviors.receive { (context, message) =>
//      message match {
//        case ReadConsoleInput() =>
//          val futureResult = Future(StdIn.readLine())(context.executionContext)
//          context.pipeToSelf(futureResult) {
//            case Success(value) =>
//          }
//      }
//    }
//  }
//
//  def isValidString( str: String ): Boolean = {
//    var isValid: Boolean = false
//
//    if (str != null && !str.trim().isEmpty)
//      isValid = true
//
//    isValid
//  }
//
//}