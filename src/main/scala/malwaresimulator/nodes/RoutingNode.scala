package malwaresimulator.nodes

import malwaresimulator.{Connection, Network}
import malwaresimulator.engine.core.{Datagram, InetAddress}

/**
 *  ネットワークノードで，自分宛ではないデータグラムを転送する，
 */
trait RoutingNode extends NetworkNode {
  private val rtable: RoutingTable = RoutingTable() /* 経路表 */

  /**
   *  経路表を得る
   *  @return 経路表
   */
  def getRoutingTable(): RoutingTable = rtable

  /**
   * 　ルーティング表を経路を追加する
   *   @param dest 行き先アドレス
   *   @param gw   ゲートウェイ
   *   @param conn 接続先コネクタ
   */
  def addRoute(dest: InetAddress, gw: InetAddress, conn: Connection): this.type = {
    rtable.addRoute(dest, gw, conn)
    this
  }

  /**
   *  ルーティング表に経路を追加する
   *  @param dest 行き先アドレス
   *  @param net  行き先ネットワーク
   */
  def addRoute(dest: InetAddress, gw: InetAddress, net: Network): this.type = {
    val conn = connections.filter(_.network == net)
    if (!conn.isEmpty) addRoute(dest, gw, conn.head)
    else {
      println("Fatal error. Cannot add a route.")
    }
    this
  }

  /**
   *   自分宛では無いデータグラムについての処理
   *   @param d 自分宛では無いデータグラム
   */
  override def deliverDatagram(d: Datagram): Unit = {

    // 行先アドレスにデータグラムを投げるための情報を得る
    var route: (InetAddress, Connection) = rtable.routing(d)

    if (route == null) {
      // ルーティング表に行き先アドレスがみつからないとき
      // defaultRoute 宛にデータグラムを送信する
      route = rtable.routing(rtable.defaultRoute)
      if (route == null) {
        println("There is not a default route.")
        println("Send the detagram, " + d + ", to all connections.")
        connections.foreach(con => { con.network ! d })
      }
    }
    val (gw, conn) = route
    // ゲートウェイのアドレスを追加してネットワークにデータグラムを送る
    conn.network ! Datagram(d.srcAddress,
      d.srcPort,
      d.dstAddress,
      d.dstPort,
      d.payload,
      gw,
      d.option)
  }

}
