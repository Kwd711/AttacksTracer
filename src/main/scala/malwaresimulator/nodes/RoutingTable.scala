package malwaresimulator.nodes

import malwaresimulator.Connection
import malwaresimulator.engine.core.InetAddress
import malwaresimulator.engine.core.Datagram

import scala.collection.mutable.ListBuffer


private[nodes] case class RoutingTable() {
  private var table = new ListBuffer[(InetAddress, // 宛先アドレス
    InetAddress, // ゲートウェイ
    Connection)] // 接続
  // デフォルト経路
  val defaultRoute = InetAddress.Default // 0.0.0.0/0 にセットする

  /**
   *  経路を追加する
   *  @param dest 宛先アドレス
   *  @param gw   ゲートウェイ
   *  @param con  接続
   */
  def addRoute(dest: InetAddress, gw: InetAddress, con: Connection): this.type = {
    table += ((dest, gw, con))
    this
  }

  /**
   *  経路を削除する
   *  @param dest 削除する宛先アドレス
   */
  def removeRoute(dest: InetAddress): Unit = {
    // table -= table.filter(_._1 == dest).head
    table.find(_._1 == dest) match {
      case Some((dest, gw, conn)) => table -= ((dest, gw, conn))
      case _ => println(s"$dest is not found.")
    }
  }

  /**
   *  データグラムから検索して経路を得る
   *  @param d データグラム
   *  @return (ゲートウェイ, 接続)
   */
  def routing(d: Datagram): (InetAddress, Connection) = {
    routing(d.dstAddress)
  }

  /**
   *  アドレスから検索して経路を得る
   *  @param dest 宛先アドレス
   *  @return     (ゲートウェイ，接続)
   */
  def routing(dest: InetAddress): (InetAddress, Connection) = {
    // destのアドレスそのものが登録されている場合
    table.find(item => { item._1 == dest }) match {
      // 見つかればgwとconnectionを返す
      case Some((d, g, c)) => return (g, c)
      case _ => {
        // destの所属するネットワークが登録されている場合
        table.find(item => { item._1.isSameNetwork(dest, 24) }) match {
          // ネットワークが登録されている場合
          case Some((d, g, c)) => {
            if (dest.isSameNetwork(g, 24))
              return (dest, c)
            else
              return (g, c)
          }
          case _ => {
            // アドレスそのものもネットワークも登録されていない場合
            table.find(item => { item._1 == defaultRoute }) match {
              case Some((d, g, c)) => (g, c)
              case _ => {
                println("Cannot to get a route.")
                println("dest=" + dest)
                //System.err.println("isSameNetwork() test:" + InetAddress("7.7.7.3", 24).isSameNetwork(InetAddress("7.7.7.0", 24)))
                display()
                assert(false)
                return null
              }
            }
          }
        }
      }
    }
  }

  /**
   *  ルーティングを表示する
   */
  def display(): Unit = {
    println("Dest.\t\tGateWay\t\tConnection")
    table.foreach(item => {
      println(item._1 + "\t" + item._2 + "\t" + item._3)
    })
  }

}
