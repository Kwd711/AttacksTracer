package malwaresimulator

import akka.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit
import org.scalatest.wordspec.AnyWordSpecLike

class MalwareSimulatorSupervisorTest extends ScalaTestWithActorTestKit with AnyWordSpecLike {
  "MalwareSimulatorSuperVisor actor" must {
    "reply WholeNetwork for ShowNet" in {
      val mss = spawn(MalwareSimulatorSupervisor.apply)

      val probe1 = createTestProbe[proto.WholeNetwork]()
      mss ! MalwareSimulatorSupervisor.ShowNet(probe1.ref)
      probe1.expectMessage(
        proto.WholeNetwork(
          Seq.empty
        )
      )

      val probe2 = createTestProbe[proto.Network]()
      mss ! MalwareSimulatorSupervisor.AddNetwork(probe2.ref, "network1", "10.0.0.0", 24)
      probe2.expectMessage(
        proto.Network(
          1,
          "network1",
          "10.0.0.0",
          24,
        )
      )

      val probe3 = createTestProbe[proto.Node]()
      mss ! MalwareSimulatorSupervisor.AddNode(probe3.ref, "node1", "10.0.0.1")
      probe3.expectMessage(
        proto.Node(
          2,
          "node1",
          "10.0.0.1",
        )
      )

      mss ! MalwareSimulatorSupervisor.AddNode(probe3.ref, "node2", "10.0.0.2")
      probe3.expectMessage(
        proto.Node(
          3,
          "node2",
          "10.0.0.2",
        )
      )

      mss ! MalwareSimulatorSupervisor.MakeConnection(probe1.ref, 2, 1, "10.0.0.1", 24)
      probe1.expectMessage(
        proto.WholeNetwork(
          Seq(
            proto.Network(
              1,
              "network1",
              "10.0.0.0",
              24,
              Seq(
                proto.Node(
                  2,
                  "node1",
                  "10.0.0.1",
                ),
              )
            )
          )
        )
      )

      mss ! MalwareSimulatorSupervisor.MakeConnection(probe1.ref, 3, 1, "10.0.0.2", 24)
      probe1.expectMessage(
        proto.WholeNetwork(
          Seq(
            proto.Network(
              1,
              "network1",
              "10.0.0.0",
              24,
              Seq(
                proto.Node(
                  2,
                  "node1",
                  "10.0.0.1",
                ),
                proto.Node(
                  3,
                  "node2",
                  "10.0.0.2",
                )
              )
            )
          )
        )
      )
    }

  }
}

